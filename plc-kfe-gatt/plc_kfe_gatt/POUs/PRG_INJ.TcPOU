<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="PRG_INJ" Id="{8b858f89-a705-4da6-a8c0-4cd0b412d38f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_INJ
VAR
	{attribute 'pytmc' :=' pv: AT1K0:GATT:CNTRL:SP '}
	fSetpointValue :FLOAT; 
	{attribute 'pytmc' :=' pv: AT1K0:GATT:CNTRL:GO '}
	bGo: BOOL; 
 {attribute 'pytmc' :=' pv: AT1K0:GATT:CNTRL:RESET '}
	bReset : BOOL; 
	{attribute 'pytmc' :=' pv: AT1K0:GATT:CNTRL:ERROR '}
	bError : BOOL; 
	{attribute 'pytmc' :=' pv: AT1K0:GATT:CNTRL:Kp1 '}
	fKp1 : REAL:= 0.04; 
	{attribute 'pytmc' :=' pv: AT1K0:GATT:CNTRL:Tn1 '}
	fTn1 : REAL:= 1;//0.5; 
	{attribute 'pytmc' :=' pv: AT1K0:GATT:CNTRL:Kp2 '}
	fKp2 : REAL:= 0.01; 
	{attribute 'pytmc' :=' pv: AT1K0:GATT:CNTRL:Tn2 '}
	fTn2 : REAL:= 0.5; 
	arrTable	: ARRAY[1..31,1..2] OF FLOAT;
	fManValue											: FLOAT;
	bExtrapolate										: BOOL;
	eMode							: E_CTRL_MODE;
	stCTRL_PID_PARAMS		: ST_CTRL_PID_PARAMS;
	bSync							: BOOL;
	bHold							: BOOL;
	eErrorId						: E_CTRL_ERRORCODES;
	bARWactive					: BOOL;
	(* controller *)
	fbCTRL_PID					: FB_CTRL_PID;
	bInit							: BOOL	:= TRUE;
	fbCTRL_LIN_INTERPOLATION					: FB_CTRL_LIN_INTERPOLATION;
	//stCTRL_LIN_INTERPOLATION_PARAMS		: ST_CTRL_LIN_INTERPOLATION_PARAMS;
	stCTRL_LIN_INTERPOLATION_PARAMS_GEM	: ST_CTRL_LIN_INTERPOLATION_PARAMS;
	fbCTRL_DEADBAND						: FB_CTRL_DEADBAND;
	stCTRL_DEADBAND_PARAMS			: ST_CTRL_DEADBAND_PARAMS;
		//timer to switch the pid from manual to active 5seconds??? 10 seconds???
	pid_on :TON;
	wait : time := T#10S;
	FTrig: F_TRIG;
		

	i_xExtIlkOK: INT;
	GEM2_Aperture_Closed: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Valves
VCN_70(i_xExtIlkOK := ((US_MAA_OK AND US_Roughing_Valves_Open AND US_Turbo_Valves_Open AND US_Turbo_Running) 
						AND (DS_MAA_OK AND DS_Roughing_Valves_Open AND DS_Turbo_Valves_Open AND DS_Turbo_Running)), 
						i_ReqPos:=  fbCTRL_LIN_INTERPOLATION.fOut + fbCTRL_PID.fOut);

//VGP_80
VVC_71(i_xExtILK_OK:= VVC_72.M_IsClosed(), i_xOverrideMode:= , iq_stValve=> );
VVC_72(i_xExtILK_OK:= VVC_71.M_IsClosed(), i_xOverrideMode:= , iq_stValve=> );

//Gauges
GCM_70(PG=> , i_rFULL_SCALE:= 2000);
GCM_80(PG=> , i_rFULL_SCALE:= 20);
GCM_81(PG=> , i_rFULL_SCALE:= 0.25);
// Set ADC bits for EL3174-0002
GCM_70.M_SetBits(30518);
GCM_80.M_SetBits(30518);
GCM_81.M_SetBits(30518);


//
(*Iniitialization*)
IF bInit
THEN
	(* init array with the interpolation points  *)
	(* 	fIn					 |		fOut		*)
	arrTable[1,1] := 0;		arrTable[1,2] := 0;
	arrTable[2,1] := 0.0000412;		arrTable[2,2] := 34;
	arrTable[3,1] := 0.001282;		arrTable[3,2] := 36;
	arrTable[4,1] :=  0.002136;	    arrTable[4,2] := 38;
	arrTable[5,1] :=  0.005884;	    arrTable[5,2] := 40;
	arrTable[6,1] := 0.00907;		arrTable[6,2] := 42;
	arrTable[7,1] := 0.01183;		arrTable[7,2] := 44;
	arrTable[8,1] := 0.01799;	    arrTable[8,2] := 46;
	arrTable[9,1] := 0.0302;	    arrTable[9,2] := 47;
	arrTable[10,1] := 0.0417;		arrTable[10,2] := 50;
	arrTable[11,1] := 0.06635;		arrTable[11,2] := 51;
	arrTable[12,1] := 0.08118;		arrTable[12,2] := 53;
	arrTable[13,1] := 0.0998;		arrTable[13,2] := 56;
	arrTable[14,1] := 0.10644;		arrTable[14,2] := 56.5;
	arrTable[15,1] := 0.1359;		arrTable[15,2] := 58;
	arrTable[16,1] := 0.1929;		arrTable[16,2] := 60;
	arrTable[17,1] := 0.2922;		arrTable[17,2] := 62;
	arrTable[18,1] := 0.3428;	    arrTable[18,2] := 64;
	arrTable[19,1] :=  0.405;;	    arrTable[19,2] :=66;
	arrTable[20,1] := 0.481;		arrTable[20,2] := 68;
	arrTable[21,1] := 0.5542;		arrTable[21,2] := 69;
	arrTable[22,1] := 0.6333;	    arrTable[22,2] := 70;
	arrTable[23,1] := 0.7901;	    arrTable[23,2] := 72;
	arrTable[24,1] := 0.9307;		arrTable[24,2] := 73.04;
	arrTable[25,1] := 1.0448;		arrTable[25,2] := 73.64;
	arrTable[26,1] := 1.31919;;		arrTable[26,2] := 74.45;
	arrTable[27,1] :=  1.324;		arrTable[27,2] :=74.46;
	arrTable[28,1] := 1.71941;	arrTable[28,2] := 75;
	arrTable[29,1] :=  1.963194;		arrTable[29,2] :=75.5;
	arrTable[30,1] := 1.99999;	arrTable[30,2] := 75.505;
	arrTable[31,1] := 2;	arrTable[31,2] := 75.55;
	(* init parameter struct *)
	stCTRL_LIN_INTERPOLATION_PARAMS_GEM.tCtrlCycleTime					:= T#10ms;
	stCTRL_LIN_INTERPOLATION_PARAMS_GEM.tTaskCycleTime					:= T#10ms;
	stCTRL_LIN_INTERPOLATION_PARAMS_GEM.nDataTable_NumberOfRows		:= INT_TO_UINT(31);	

	(*FBCNTRL*)
	(* init parameter struct *)
	stCTRL_PID_PARAMS.tCtrlCycleTime		:= T#10ms;
	stCTRL_PID_PARAMS.tTaskCycleTime		:= T#10ms;
	stCTRL_PID_PARAMS.fKp					:= fKp1;			(* proportional gain Kp				*)
	stCTRL_PID_PARAMS.tTn					:= T#500ms;		(*  Tn									*)
	stCTRL_PID_PARAMS.tTv					:= T#200ms;	(*  Tv									*)
	stCTRL_PID_PARAMS.tTd					:= T#100ms;	(*  Td									*)
	stCTRL_PID_PARAMS.fOutMaxLimit			:=  78;			(* maximum output limit				*)
	stCTRL_PID_PARAMS.fOutMinLimit			:=  -100;			(* minimum output limit				*)

	(* set the mode to ACTIVE --> normal operation *)
	eMode							:= eCTRL_MODE_ACTIVE   ;					
	(* reset the init flag *)
	bInit							:= FALSE;
END_IF
(* set the addresses *)
	stCTRL_LIN_INTERPOLATION_PARAMS_GEM.pDataTable_ADR			:= ADR(arrTable);
	stCTRL_LIN_INTERPOLATION_PARAMS_GEM.nDataTable_SIZEOF		:= SIZEOF(arrTable);

if (bGo) THEN
	IF (bReset) THEN
	(* set the mode to RESET*)
	eMode							:= eCTRL_MODE_RESET   ;
	VCN_70.M_ValveControl(CloseValve);
	//bReset := False;
	ELSE
		(* set the mode to ACTIVE --> normal operation *)
	eMode							:= eCTRL_MODE_ACTIVE   ;
 	VCN_70.M_ValveControl(PressureControl);
	END_IF
END_IF
If(FTrig.Q)THEN
		eMode							:= eCTRL_MODE_PASSIVE;
		VCN_70.M_ValveControl(CloseValve);
		fSetpointValue :=0;
END_IF


fbCTRL_LIN_INTERPOLATION(
	fIn:= fSetpointValue , 
	fManValue:= fManValue , 
	bExtrapolate:= bExtrapolate, 
	eMode:= eMode, 
	stParams:= stCTRL_LIN_INTERPOLATION_PARAMS_GEM,
	fOut=> , 
	bInIsGreaterThanMaxElement=> , 
	bInIsLessThanMinElement=> , 
	eState=> , 
	eErrorId=> , 
	bError=> );


(* Gauge selection *)
IF (fSetpointValue >=0.25) THEN
	fbCTRL_PID.fActualValue := GCM_80.PG.rPRESS;
ELSE
	fbCTRL_PID.fActualValue := GCM_81.PG.rPRESS;
END_IF

(* call controller *)
fbCTRL_PID(		fSetpointValue		:= fSetpointValue,
					fActualValue		:= ,
					fManSyncValue	:= ,
					bSync				:= bSync,
					eMode				:= eMode,
					bHold				:= bHold,
					stParams			:= stCTRL_PID_PARAMS,
					fOut				=> ,
					bARWactive		=> bARWactive,
					eErrorId			=> eErrorId,
					bError				=> 
				);

	
(*deadband/clipper *)

(* call function block *)
stCTRL_DEADBAND_PARAMS.fThreshold	:=  fSetpointValue*0.0016 ;
(*fbCTRL_DEADBAND	(	fIn					:= ,
					stParams			:= stCTRL_DEADBAND_PARAMS,
					bInIsUnderThreshold => ,
					eErrorId			=> ,
					bError				=> 
				);*)

bError := fbCTRL_PID.bError OR fbCTRL_LIN_INTERPOLATION.bError;
				

	

// or NOT???

//stCTRL_PID_PARAMS.bDInTheFeedbackPath := fbCTRL_DEADBAND.bInIsUnderThreshold;


//timer
(*pid_on(IN:=, PT:= wait, Q=>, ET =>);
IF (pid_on.Q) THEN eMode:= eCTRL_MODE_ACTIVE; pid_on.IN := FALSE; END_IF; //eCTRL_MODE_TUNE????*)


FTRIG(CLK := bGo);

]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>